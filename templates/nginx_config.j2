{# Oft repeated variables #}
{% set nginx_url_prefix = "/" ~ nginx_url_prefix if nginx_url_prefix is defined else "" %}
{% if nginx_redirect_to_encrypted|default(True) and nginx_enable_tls %}
server {
        listen {{ nginx_listen_port|default(80) }};
        # This is tricksy, examples show ipv6only=no, but that must only be
        # set once for address:port pair, typically  at the "default" server
        listen [::]:{{ nginx_listen_port|default(80) }};

        server_name {{ nginx_virtualhosts | join(" ") }};

        # Supports Let's Encrypt certificate (re-)issuance process
        # /srv/letsencrypt/challenges only needs to be readable
        # by the web server process
        location /.well-known/acme-challenge {
                alias /srv/letsencrypt/challenges;
                try_files $uri @forward_https;
        }

        # These two handle forwarding to TLS protected URI
        # for all other cases
        location @forward_https {
                return 301   https://$host$request_uri;
        }
        location / {
                return 301   https://$host$request_uri;
        }
}
{% endif %}
server {
{% if nginx_enable_nontls or not nginx_enable_tls %}
        listen {{ nginx_nontls_listen_port|default(80) }};
{% endif %}
{% if nginx_enable_tls %}
        listen {{ nginx_tls_listen_port|default(443) }} ssl;

        ssl_certificate {{ nginx_certchain }};
        ssl_certificate_key {{ nginx_privkey }};
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;

        # Diffie-Hellman parameter for DHE ciphersuites, recommended
        # 2048 bits
        ssl_dhparam /etc/ssl/dhparam.pem;

        # intermediate configuration, as per Mozilla configurator
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;
{% if nginx_enable_hsts|default(False) %}
        # HSTS (ngx_http_headers_module is required)
	# specified in seconds
        add_header Strict-Transport-Security max-age={{ nginx_hsts_months*30*24*60*60|default(6) }};
{% endif %}
        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;
        # For some reason nginx does not want to use local resolver libraries
        # to resolve ocsp urls. We need to use Googles servers thus, because
        # it would be a PITA to configure this per datacenter
        resolver 8.8.8.8;
{% endif %}
        root /home/{{ nginx_site_user }}/{{ nginx_public_directory }};
        index index.html index.htm;
{# emergency hatch, when something very exotic is needed #}
{% include nginx_additional_config_file|default("non_existent") ignore missing %}

        # HTTP-Host:
        server_name {{ nginx_virtualhosts | join(" ") }};

        # blocks uploads (client requests) larger than 100MiB
        # this is actually larger than the nginx default
        client_max_body_size 100m;

        # This defines a 4MiB buffer that is used to
        # store responses from proxied upstreams while
        # they are being read by a slow client, thus freeing
        # the server process to serve another client.
        # This done here, because it is then generic across all
        # possible backend servers (uwsgi would be self-cabable, naturally)
        #
        # If the buffer is too small nginx will write the buffer
        # out to file, which is silly.
        proxy_buffers 1024 4k;

        # This is a complement to proxy_buffers, which defines the size
        # of buffer used to the the headers sent by upstream
        # This is normally 4k, but we increase it to 8k as our services
        # tend to generate unreasonably large cookies. 8k will always
        # Fit a 4k cookie, which is the maximum for most browsers.
        proxy_buffer_size 8k;

{% if nginx_shortcut_django_aliases|default(False) %}
	# public files that do not directly belong to the application
	# like accessibility statements or robots.txt
        location {{ nginx_url_prefix }}/public/ {
                alias /home/{{ nginx_site_user }}/public/;
        }

        location {{ nginx_url_prefix }}/static/ {
                alias /home/{{ nginx_site_user }}/static/;
        }

        # Media files uploaded by users
        location {{ nginx_url_prefix }}/media/ {
                alias /home/{{ nginx_site_user }}/media/;
        }
{% endif %}
{# these include checks for their top-level variable #}
{% include 'nginx_rewrite_fragment.j2' %}
{% include 'nginx_alias_fragment.j2' %}
{% include 'nginx_redirect_fragment.j2' %}
{% include 'nginx_uwsgi_fragment.j2' %}
{% include 'nginx_proxy_fragment.j2' %}
{% include 'nginx_tryfiles_fragment.j2' %}
        # Used for Let's Encrypt certificate (re-)issuance process
        location /.well-known/acme-challenge {
            alias /srv/letsencrypt/challenges;
        }
}
